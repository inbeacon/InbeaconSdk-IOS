// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name InbeaconSdk
import AudioToolbox
import CoreLocation
import CoreMotion
import CoreTelephony
import Foundation
@_exported import InbeaconSdk
import Swift
import UIKit
import UserNotifications
public enum InOutOneshot : Swift.String {
  case In
  case Out
  case Oneshot
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum InbLogLevel : Swift.Int, Swift.Comparable, Swift.CustomStringConvertible {
  case verbose = 0
  case debug
  case info
  case warning
  case error
  case severe
  case none
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public func < (lhs: InbeaconSdk.InbLogLevel, rhs: InbeaconSdk.InbLogLevel) -> Swift.Bool
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class InbeaconSdk : ObjectiveC.NSObject {
  @objc public static var sharedInstance: InbeaconSdk.InbeaconSdk
  @objc open class func getInstance() -> InbeaconSdk.InbeaconSdk
  @objc(setClientID:andClientSecret:) open func setCredentials(clientId: Swift.String, clientSecret: Swift.String)
  @discardableResult
  @objc(createWithClientID:andClientSecret:) open class func createWith(clientId: Swift.String, clientSecret: Swift.String) -> InbeaconSdk.InbeaconSdk
  @objc(refreshWithForce:) open func refresh(_ force: Swift.Bool)
  @objc(refresh) open func refresh()
  @available(iOS, deprecated: 10.0)
  @discardableResult
  @objc(didReceiveLocalNotification:) open func didReceiveLocalNotification(_ notification: UIKit.UILocalNotification) -> Swift.Bool
  @available(iOS 10.0, *)
  @discardableResult
  @objc(didReceiveUserNotification:) open func didReceiveUserNotification(_ notification: UserNotifications.UNNotification) -> Swift.Bool
  @objc open var IDFA: Swift.String? {
    @objc get
    @objc set(newIDFA)
  }
  @objc open var PPID: Swift.String {
    @objc get
    @objc set(newPPID)
  }
  @objc open var logLevel: InbeaconSdk.InbLogLevel {
    @objc get
    @objc set(newLevel)
  }
  @objc open var askPermissions: Swift.Bool {
    @objc get
    @objc set(newLevel)
  }
  open var user: InbeaconSdk.UserInfoManager {
    get
    set(new)
  }
  @objc(userStringForKey:) open func userStringForKey(_ key: Swift.String) -> Swift.String?
  @objc(userNumberForKey:) open func userNumberForKey(_ key: Swift.String) -> Foundation.NSNumber?
  @objc(setUserString:forKey:) open func setUserString(_ value: Swift.String, ForKey key: Swift.String)
  @objc(setUserNumber:forKey:) open func setUserNumber(_ value: Foundation.NSNumber, ForKey key: Swift.String)
  @objc(userHasTag:) open func userHasTag(_ tag: Swift.String) -> Swift.Bool
  @objc(userSetTag:) open func userSetTag(_ tag: Swift.String)
  @objc(userResetTag:) open func userResetTag(_ tag: Swift.String)
  @objc(triggerCustomEventId:io:extra:) open func triggerCustomEvent(id: Swift.Int, ioType: Swift.String, extra: Swift.String)
  @objc(checkCapabilitiesAndRights) open func checkCapabilitiesAndRights() -> Foundation.NSError?
  @objc(checkCapabilitiesAndRightsWithAlert) open func checkCapabilitiesAndRightsWithAlert()
  @objc(setSettingString:ToValue:) open func setSettingString(_ setting: Swift.String, val: Swift.String)
  @objc(setSettingInt:ToValue:) open func setSettingInt(_ setting: Swift.String, val: Swift.Int)
  open func setSetting(_ setting: Swift.String, val: Any)
  @objc(settingForKey:) open func settingString(_ setting: Swift.String) -> Swift.String?
  open func setting(_ setting: Swift.String) -> Any?
  open func setEndpoint(_ endpoint: InbeaconSdk.InbEndpoint)
  open func requestGpsFix(_ callback: @escaping (CoreLocation.CLLocation) -> Swift.Void)
  open func stressTest()
  open func modalclickWithClosebar(_ doclosebar: Swift.Bool, doUpperThird: Swift.Bool = false)
  @objc deinit
}
public protocol UserInfoManager {
  func set(_ key: Swift.String, _ val: Any, source: InbeaconSdk.UserinfoSource)
  func save()
  func start()
  subscript(key: Swift.String) -> Swift.String? { get set }
  subscript(key: Swift.String) -> Swift.Int? { get set }
  subscript(key: Swift.String) -> Swift.Double? { get set }
  func hasTag(_ tag: Swift.String) -> Swift.Bool
  func setTag(_ tag: Swift.String)
  func resetTag(_ tag: Swift.String)
}
public enum UserinfoSource : Swift.Int {
  case srv
  case dev
  case devsend
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum InbEndpoint : Swift.Int {
  case production = 0
  case testing
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum InbSdkErrorCode : Swift.Int {
  case undefined
  case locationManagerRestrictedOrDenied
  case locationManagerDisabled
  case locationRangingDisabled
  case notificationsBlocked
  case bluetoothOff
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
infix operator <<< : BitwiseShiftPrecedence
extension CLLocationCoordinate2D : Swift.Equatable {
  public static func == (lhs: CoreLocation.CLLocationCoordinate2D, rhs: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
}
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: InbeaconSdk.JSON) throws
  public func merged(with other: InbeaconSdk.JSON) throws -> InbeaconSdk.JSON
  public var type: InbeaconSdk.`Type` {
    get
  }
  public var error: InbeaconSdk.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: InbeaconSdk.JSON {
    get
  }
  public static var null: InbeaconSdk.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: InbeaconSdk.Index<T>, rhs: InbeaconSdk.Index<T>) -> Swift.Bool
  public static func < (lhs: InbeaconSdk.Index<T>, rhs: InbeaconSdk.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = InbeaconSdk.Index<InbeaconSdk.JSON>
public typealias JSONRawIndex = InbeaconSdk.Index<Any>
extension JSON : Swift.Collection {
  public typealias Index = InbeaconSdk.JSONRawIndex
  public var startIndex: InbeaconSdk.JSON.Index {
    get
  }
  public var endIndex: InbeaconSdk.JSON.Index {
    get
  }
  public func index(after i: InbeaconSdk.JSON.Index) -> InbeaconSdk.JSON.Index
  public subscript(position: InbeaconSdk.JSON.Index) -> (Swift.String, InbeaconSdk.JSON) {
    get
  }
  public typealias Element = (Swift.String, InbeaconSdk.JSON)
  public typealias Indices = Swift.DefaultIndices<InbeaconSdk.JSON>
  public typealias Iterator = Swift.IndexingIterator<InbeaconSdk.JSON>
  public typealias SubSequence = Swift.Slice<InbeaconSdk.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: InbeaconSdk.JSONKey { get }
}
extension Int : InbeaconSdk.JSONSubscriptType {
  public var jsonKey: InbeaconSdk.JSONKey {
    get
  }
}
extension String : InbeaconSdk.JSONSubscriptType {
  public var jsonKey: InbeaconSdk.JSONKey {
    get
  }
}
extension JSON {
  public subscript(path: [InbeaconSdk.JSONSubscriptType]) -> InbeaconSdk.JSON {
    get
    set
  }
  public subscript(path: InbeaconSdk.JSONSubscriptType...) -> InbeaconSdk.JSON {
    get
    set
  }
}
extension JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: InbeaconSdk.JSON.StringLiteralType)
  public init(unicodeScalarLiteral value: InbeaconSdk.JSON.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = InbeaconSdk.JSON.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = InbeaconSdk.JSON.StringLiteralType
}
extension JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [InbeaconSdk.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension JSON {
  public var array: [InbeaconSdk.JSON]? {
    get
  }
  public var arrayValue: [InbeaconSdk.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension JSON {
  public var dictionary: [Swift.String : InbeaconSdk.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : InbeaconSdk.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension JSON : Swift.Comparable {
}
public func == (lhs: InbeaconSdk.JSON, rhs: InbeaconSdk.JSON) -> Swift.Bool
public func <= (lhs: InbeaconSdk.JSON, rhs: InbeaconSdk.JSON) -> Swift.Bool
public func >= (lhs: InbeaconSdk.JSON, rhs: InbeaconSdk.JSON) -> Swift.Bool
public func > (lhs: InbeaconSdk.JSON, rhs: InbeaconSdk.JSON) -> Swift.Bool
public func < (lhs: InbeaconSdk.JSON, rhs: InbeaconSdk.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: InbeaconSdk.writingOptionsKeys, b: InbeaconSdk.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension JSON : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension InbeaconSdk.InOutOneshot : Swift.Equatable {}
extension InbeaconSdk.InOutOneshot : Swift.Hashable {}
extension InbeaconSdk.InOutOneshot : Swift.RawRepresentable {}
extension InbeaconSdk.InbLogLevel : Swift.Hashable {}
extension InbeaconSdk.InbLogLevel : Swift.RawRepresentable {}
extension InbeaconSdk.UserinfoSource : Swift.Equatable {}
extension InbeaconSdk.UserinfoSource : Swift.Hashable {}
extension InbeaconSdk.UserinfoSource : Swift.RawRepresentable {}
extension InbeaconSdk.InbEndpoint : Swift.Equatable {}
extension InbeaconSdk.InbEndpoint : Swift.Hashable {}
extension InbeaconSdk.InbEndpoint : Swift.RawRepresentable {}
extension InbeaconSdk.InbSdkErrorCode : Swift.Equatable {}
extension InbeaconSdk.InbSdkErrorCode : Swift.Hashable {}
extension InbeaconSdk.InbSdkErrorCode : Swift.RawRepresentable {}
extension InbeaconSdk.SwiftyJSONError : Swift.Equatable {}
extension InbeaconSdk.SwiftyJSONError : Swift.Hashable {}
extension InbeaconSdk.SwiftyJSONError : Swift.RawRepresentable {}
extension InbeaconSdk.`Type` : Swift.Equatable {}
extension InbeaconSdk.`Type` : Swift.Hashable {}
extension InbeaconSdk.`Type` : Swift.RawRepresentable {}
extension InbeaconSdk.writingOptionsKeys : Swift.Equatable {}
extension InbeaconSdk.writingOptionsKeys : Swift.Hashable {}
